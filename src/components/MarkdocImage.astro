---
import { Image } from "astro:assets";

interface Props {
    src: string;
    alt: string;
    widths?: number[];
    sizes?: string;
    height?: number;
    title?: string;
}

const images = import.meta.glob<{ default: ImageMetadata }>(
"/src/assets/img/**/*.{jpeg,jpg,png,gif,svg}",
);

console.log(Astro.props)
const { src, alt, title } = Astro.props as Props
let assetPath = src.replace(/^[@\/]img/, "/src/assets/img");

if (!images[assetPath]) {
    throw new Error(`Image not found: ${assetPath}`);
}

const image = await images[assetPath]();
const fullWidth = image.default.width;
let { widths, sizes } = Astro.props;

if (!widths) {
  widths = [600, 800, 1000];
}

widths = widths.filter((width) => width < fullWidth)

if (!sizes && widths.length > 1) {
    sizes = ""
    const ruleLimit = widths.length - 1

    for (let i = 0; i < ruleLimit; i++) {
      const thisWidth = widths[i]
      sizes += `(max-width: ${thisWidth + 200}px) ${thisWidth}px, `
    }

    sizes += ` ${widths[ruleLimit]}px`
}
---

<figure>
  <Image src={image.default} {alt} {widths} {sizes} />
    {title && <figcaption>{title}</figcaption>}
</figure>

<style type="text/scss">
  img {
    width: 100%;
    height: 100%;
    margin: auto;
    object-fit: cover;

    @container (min-width: 800px) {
        max-width: 1000px;
    }

    @container (min-width: 1000px) {
        max-width: 1200px;
    }

    @container (min-width: 1200px) {
        max-width: 1400px;
    }
  }
</style>
